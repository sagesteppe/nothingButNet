if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- ttheme_minimal()
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = 1000, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#'
legenDrawer <- function(values, colN, directory, fname){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal()
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = 1000, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
tt2 <- gridExtra::ttheme_minimal()
legenDrawer(plants_legend$full, colN = 8)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#'
legenDrawer <- function(values, colN, directory, fname){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = 1000, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page,){
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
graph_dims <- function(ntwrks_page){
col <- length(col_var)
W = round(1984 / col, 0)
H = round(2864 / (ntwrks_page/col), 0 )
if(W > H){ W <- H} else {H <- W}
dims <- list('W' = W,
'H' = H)
return(dims)
}
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
View(graph_dims)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
col_var <- rep('A',length(colN))
dims <- graph_dims(ntwrks_page)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
col_var <- rep('A',length(colN))
dims <- graph_dims(ntwrks_page, col_var)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Size graphs for assembling on an A4 page
#'
#' this function hopefully returns square graphs of similar size which may be
#' somewhat readily assembled onto an A4 page with what i hope are standard
#' page margins (2.97cm top & bottom, 2.1 cm sides). It is easily modifiable for
#' alternative dimensions. It assumes you want to fill an entire page with graphs.
#' @param ntwrks_page = the number of networks to place on the page
#' @col = the number of columns to spread the networks across
#' @seealso = 'graphDrawer'
#' @export
graph_dims <- function(ntwrks_page, col){
col <- length(col_var)
W = round(1984 / col, 0)
H = round(2864 / (ntwrks_page/col), 0 )
if(W > H){ W <- H} else {H <- W}
dims <- list('W' = W,
'H' = H)
return(dims)
}
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Size graphs for assembling on an A4 page
#'
#' this function hopefully returns square graphs of similar size which may be
#' somewhat readily assembled onto an A4 page with what i hope are standard
#' page margins (2.97cm top & bottom, 2.1 cm sides). It is easily modifiable for
#' alternative dimensions. It assumes you want to fill an entire page with graphs.
#' @param ntwrks_page = the number of networks to place on the page
#' @col = the number of columns to spread the networks across
#' @seealso = 'graphDrawer'
#' @export
graph_dims <- function(ntwrks_page, col){
col <- length(col_var)
W = round(1984 / col, 0)
H = round(2864 / (ntwrks_page/col), 0 )
if(W > H){ W <- H} else {H <- W}
dims <- list('W' = W,
'H' = H)
return(dims)
}
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
#' Size graphs for assembling on an A4 page
#'
#' this function hopefully returns square graphs of similar size which may be
#' somewhat readily assembled onto an A4 page with what i hope are standard
#' page margins (2.97cm top & bottom, 2.1 cm sides). It is easily modifiable for
#' alternative dimensions. It assumes you want to fill an entire page with graphs.
#' @param ntwrks_page = the number of networks to place on the page
#' @col = the number of columns to spread the networks across
#' @seealso = 'graphDrawer'
#' @export
graph_dims <- function(ntwrks_page, col){
W = round(1984 / col, 0)
H = round(2864 / (ntwrks_page/col), 0 )
if(W > H){ W <- H} else {H <- W}
dims <- list('W' = W,
'H' = H)
return(dims)
}
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8)
legenDrawer(plants_legend$full, colN = 8, ntwrks_page = 9)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
print(dims$H)
}
legenDrawer(plants_legend$full, colN = 8, ntwrks_page = 9)
View(plants_legend)
setwd('~/Documents/nothingButNet/data/raw')
p2d <- file.path('~/Documents/nothingButNet/data/raw')
files <- list.files(p2d, pattern = 'csv')
blast <- read.csv(file.path(p2d, files[grep('blast', files)])) %>%
select(sample.id, Taxon  = name, n = Seqs_pr_taxon) %>%
mutate('Method' = 'BLAST') %>%
drop_na()
bracken <- read.csv(file.path(p2d, files[grep('bracken', files)])) %>%
filter(taxonomy_lvl %in% c('S', 'G')) %>%
select(sample.id, Taxon, n = new_est_reads) %>%
mutate('Method' = 'Bracken')
kraken <- read.csv(file.path(p2d, files[grep('kraken', files)]))  %>%
select(sample.id = Sample, Taxon, n) %>%
mutate('Method' = 'Kraken')
arranged_plants <- read.csv(file.path(p2d, files[grep('species', files)])) %>%
pull(abbreviation)
plants_legend <- read.csv(file.path(p2d, files[grep('species', files)]))
seqs <- rbind(blast, bracken, kraken) %>%
mutate(sample.id = as.numeric(sample.id))
corbiculae <- read.csv(file.path(p2d, files[grep('Corbiculae', files)])) %>%
select(-site, -plant.species)
seqs <- left_join(seqs, corbiculae, by = 'sample.id')
p2d <- ('~/Documents/floral_observations/data')
files <- list.files(p2d, pattern = 'csv')
weeks <- read.csv(
paste0(p2d, '/', files[grep('queen_observations', files)]) )  %>%
select(date, week) %>%
distinct(date, .keep_all = T) %>%
mutate(period = case_when(
week %in% 3:5 ~ 'Early',
week %in% 6:8 ~ 'Mid',
week %in% 9:11 ~ 'Late'
))
seqs <- left_join(seqs, weeks, by = 'date') %>%
filter(caste == 'q') %>%
drop_na() %>%
mutate(bombus.species = gsub('Bombus.|.dark|.orange',  "", bombus.species)) %>%
select(Taxon, period, n, bombus.species, date, Method)
rm(blast, bracken, kraken, files, p2d, corbiculae, weeks)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8, ntwrks_page = 9)
View(plants_legend)
plsl <- plants_legend %>% pull(full)
View(plants_legend)
filter(str_detect(.x, '.sp.$',negate = T) %>%
plsl <- plants_legend %>%
filter(str_detect(.x, '.sp.$',negate = T)) %>%
pull(full)
plsl <- plants_legend %>%
plsl <- plants_legend %>%
filter(str_detect(.x, '.sp.$')) %>%
pull(full)
plsl <- plants_legend %>%
filter(str_detect(., '.sp.$')) %>%
pull(full)
plsl <- plants_legend %>%
filter(str_detect(full, '.sp.$')) %>%
pull(full)
plsl <- plants_legend %>%
filter(str_detect(full, '.sp.$', negate= T)) %>%
pull(full)
#' Creates a simple abbreviation legend for graphs
#'
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/colN)
l <- (grp * colN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = colN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
legenDrawer(plants_legend$full, colN = 8, ntwrks_page = 9)
legenDrawer(plsl, colN = 8, ntwrks_page = 9)
#' Creates a simple abbreviation legend for graphs
#'
#' @param values a vector of names
#' @param colN number of columns ot spread legend across
#' @fname a file name for the legend, defaults to legend.
#' @ntwrks_page the number of networks you plan to place on the page
#'
legenDrawer <- function(values, LegcolN, colN, directory, fname, ntwrks_page){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/LegcolN)
l <- (grp * LegcolN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = LegcolN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}
#' Creates a simple abbreviation legend for graphs
#'
#' @param values a vector of names
#' @param LegcolN number of columns to spread legend across
#' @param colN number of columns that nets will be split across
#' @ntwrks_page the number of networks you plan to place on the page
#' @param directory location to size legend before assembling to final product
#' @fname a file name for the legend, defaults to legend.
#'
legenDrawer <- function(values, LegcolN, colN, ntwrks_page, directory, fname){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'legend.png'}
dims <- graph_dims(ntwrks_page, col = colN)
lname <- file.path(directory, fname)
grp <- ceiling(length(values)/LegcolN)
l <- (grp * LegcolN) - length(values)
padding <- rep("", l)
values <- c(values, rep("", l))
v <- matrix(data = values , nrow = grp, ncol = LegcolN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
p <- gridExtra::tableGrob(v, theme = tt2)
png(lname, height = dims$H, width = 1984)
gridExtra::grid.arrange(p)
dev.off()
}

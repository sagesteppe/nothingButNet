mainT = 'Comparision of Foraging Patterns from Molecular and Observations',
row_var = c('Oservations', 'Morphology', 'Molecular'), sep = '.')
nets2Page(col_var = 'Method', fname = 'Mosaiced_MolObs_net',
directory = '../NetworkGraphs/Manuscript',
mainT = 'Comparision of Foraging Patterns from Molecular and Observations',
row_var = c('Observations', 'Morphology', 'Molecular'), sep = '.')
setwd('~/Documents/nothingButNet/scripts')
dat <- read.csv('../data/JeremieReclassTable.csv') %>%
mutate(value = if_else(value == 0, 0.1, value))
# source('functions.R')
# we will create Three different networks. Where each one displays a different type of information
p2d <- file.path('../data/raw')
files <- list.files(p2d)
arranged_plants <- read.csv(file.path(p2d, files[grep('species', files)])) %>%
mutate(Genus = str_extract(full, '^.*[.]+?'),
Genus = str_remove(Genus, '[.].*$')) %>%
drop_na(Genus) %>%
filter(Genus != 'P') %>%
distinct(Genus) %>%
pull(Genus)
arranged_bees <- unlist(strsplit(readLines(
file.path(p2d, files[grep('bees', files)])), split = ','))
rm(p2d, files)
out <- dat %>%
split(f = list(.$method) ) %>%
map(~ .x  %>%
pivot_wider(names_from = plant, values_from = value)
) %>%
map(~ .x  %>%
column_to_rownames(., var = 'bee') %>%
mutate(across(.cols = everything(), ~replace_na(.x, 0))) %>%
select(-method)) %>%
map(., arrange_nets, col_arrange = arranged_plants, # now use the ARRANGE NET fun
row_arrange = arranged_bees) # to remove empty plants
setwd('~/Documents/nothingButNet/scripts')
dat <- read.csv('../data/JeremieReclassTable.csv') %>%
mutate(value = if_else(value == 0, 0.1, value))
source('functions.R')
# we will create Three different networks. Where each one displays a different type of information
p2d <- file.path('../data/raw')
files <- list.files(p2d)
arranged_plants <- read.csv(file.path(p2d, files[grep('species', files)])) %>%
mutate(Genus = str_extract(full, '^.*[.]+?'),
Genus = str_remove(Genus, '[.].*$')) %>%
drop_na(Genus) %>%
filter(Genus != 'P') %>%
distinct(Genus) %>%
pull(Genus)
arranged_bees <- unlist(strsplit(readLines(
file.path(p2d, files[grep('bees', files)])), split = ','))
rm(p2d, files)
out <- dat %>%
split(f = list(.$method) ) %>%
map(~ .x  %>%
pivot_wider(names_from = plant, values_from = value)
) %>%
map(~ .x  %>%
column_to_rownames(., var = 'bee') %>%
mutate(across(.cols = everything(), ~replace_na(.x, 0))) %>%
select(-method)) %>%
map(., arrange_nets, col_arrange = arranged_plants, # now use the ARRANGE NET fun
row_arrange = arranged_bees) # to remove empty plants
Observations <- out[[1]]
Morphology <- out[[2]]
Molecular <- out[[3]]
graphDrawer(Observations, lbl_fnt = 14,
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
graphDrawer(Morphology, lbl_fnt = 14,
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
graphDrawer(Molecular, lbl_fnt = 14,
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
nets2Page(col_var = 'Method', fname = 'Mosaiced_MolObs_net',
directory = '../NetworkGraphs/Manuscript',
mainT = 'Comparision of Foraging Patterns from Molecular and Observations',
row_var = c('Observations', 'Morphology', 'Molecular'), sep = '.')
View(graphDrawer)
graphDrawer(Observations, lbl_fnt = 14,
fname = 'Method.Observations',
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
graphDrawer(Morphology, lbl_fnt = 14,
fname = 'Method.Morphology',
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
graphDrawer(Molecular, lbl_fnt = 14,
fname = 'Method.Molecular',
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
nets2Page(col_var = 'Method', fname = 'Mosaiced_MolObs_net',
directory = '../NetworkGraphs/Manuscript',
mainT = 'Comparision of Foraging Patterns from Molecular and Observations',
row_var = c('Observations', 'Morphology', 'Molecular'), sep = '.')
graphDrawer(Molecular, lbl_fnt = 14,
fname = 'Method.Molecular',
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
directory = '../NetworkGraphs/Manuscript',
ntwrks_page = 3,
col = 1
)
Observations <- out[[1]]
blanker(Observation)
blanker(Observations)
obs <- rbind(Observations, matrix(ncol = ncol(Observations), nrow = 3, data = 0))
obs <- rbind(Observations, setNames(matrix(ncol = ncol(Observations), nrow = 3, data = 0), colnames(Observations))
obs <- rbind(Observations, setNames(matrix(ncol = ncol(Observations), nrow = 3, data = 0), colnames(Observations)))
obs <- rbind(Observations, setNames(matrix(ncol = ncol(Observations), nrow = 3, data = 0), colnames(Observations)))
setNames(matrix(ncol = ncol(Observations), nrow = 3, data = 0), colnames(Observations))
obs <- rbind(Observations, setNames(data.frame(matrix(ncol = ncol(Observations), nrow = 3, data = 0)), colnames(Observations)))
obs <- rbind(Observations,
setNames(data.frame(matrix(ncol = ncol(Observations), nrow = 3, data = 0)),
colnames(Observations)))
View(obs)
obs <- cbind(obs, data.frame(matrix(data = 0, nrow = nrow(obs), ncol = 3)))
obs
net = igraph::graph_from_incidence_matrix(obs, weight=T)
deg = igraph::centr_degree(net, mode="all")
net <- set_colors(x = blanked_data, net, node_clrs, VNames = VNames)
V(net)$label.color <- 'black'
V(net)$size = 2.5*sqrt(deg$res)
E(net)$width = E(net)$weight/3
template <- layout_in_circle(net)
plot(net, layout=template,
edge.color = edge_clr,
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift,
label.font = lbl_fnt
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
#  vertex.label = VNames,
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
label.font = lbl_fnt
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25# ,
#  vertex.label = VNames,
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
vertex_names(obs)
View(vertex_names)
out1 <- vertex_names(obs)
out1
#' Clean up element names from 'blanker'
#'
#' After inserting the blank 'observations' into the graph to act as
#' vertices we will remove their row and column names to hide the
#' dummy names R gives them by default.
#' @param x = a matrix output from 'blanker'
#' @seealso 'blanker', 'graphDrawer'
#' @export
vertex_names <- function(x){
#' After inserting the blank 'observations' into the graph to act as
#' vertices we will remove their row and column names to hide the
#' dummy names R gives them by default.
vertice_names <- c(rownames(x), colnames(x))
vertice_names <- sub('^X$', '', vertice_names)
vertice_names <- sub('^X[0-9]$', '', vertice_names)
vertice_names <- sub('^X.[0-9]$', '', vertice_names)
vertice_names <- sub('^X[0-9].[0-9]$', '', vertice_names)
vertices_names <- sub('^[0-9]', '', vertice_names)
vertice_names <- gsub("\\.(?=[A-Za-z])", ". ", vertice_names, perl = TRUE)
}
out1 <- vertex_names(obs)
VNames <- vertex_names(obs)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25# ,
#  vertex.label = VNames,
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25# ,
vertex.label = VNames,
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames, #
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames# , #
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
#net <- set_colors(x = blanked_data, net, node_clrs, VNames = VNames)
VNames
#' Clean up element names from 'blanker'
#'
#' After inserting the blank 'observations' into the graph to act as
#' vertices we will remove their row and column names to hide the
#' dummy names R gives them by default.
#' @param x = a matrix output from 'blanker'
#' @seealso 'blanker', 'graphDrawer'
#' @export
vertex_names <- function(x){
#' After inserting the blank 'observations' into the graph to act as
#' vertices we will remove their row and column names to hide the
#' dummy names R gives them by default.
vertice_names <- c(rownames(x), colnames(x))
vertice_names <- sub('^X$', '', vertice_names)
vertice_names <- sub('^X[0-9]$', '', vertice_names)
vertice_names <- sub('^X.[0-9]$', '', vertice_names)
vertice_names <- sub('^X[0-9].[0-9]$', '', vertice_names)
vertice_names <- sub('^[0-9]', '', vertice_names)
vertice_names <- gsub("\\.(?=[A-Za-z])", ". ", vertice_names, perl = TRUE)
}
VNames <- vertex_names(obs)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames# , #
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
net <- set_colors(x = obs, net, node_clrs  = c("#CEAB07", "deeppink2"),, VNames = VNames)
net <- set_colors(x = obs, net, node_clrs  = c("#CEAB07", "deeppink2"), VNames = VNames)
V(net)$label.color <- 'black'
V(net)$size = 2.5*sqrt(deg$res)
E(net)$width = E(net)$weight/3
template <- layout_in_circle(net)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames# , #
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
#' Give node labels rendering space
#'
#' 'vert_lab_position' specifies the positions for the labels of objects in the
#' graphs. It does not modify the label values, just positions and orientation.
#'
#' @param x = a matrix output from vertex_names
#' @col = the number of columns of graphs
#' @seealso 'vertex_names', 'graphDrawer'
#' @export
vert_lab_position <- function(x, col){
m_dist <- if(col == 3){m_dist = 4.5} else if(col < 3){m_dist = 3}
nodes <- nrow(x) + ncol(x)
degrees <- 360/nodes
positions <- degrees * 1:nodes
degree_shift <- c(
rep(0, length(which((positions < 65) == TRUE))),
rep(-pi/2, length(which((positions > 65 & positions < 125) == TRUE))),
rep(pi, length(which((positions > 125 & positions < 245) == TRUE))),
rep(pi/2, length(which((positions > 245 & positions < 295) == TRUE))),
rep(0, length(which((positions > 295) == TRUE)))
# '0' right, '-pi/2' up, 'pi' left, 'pi/2' down
)
dist_vals <- c(
rep(m_dist, length(which((positions < 65) == TRUE))),
seq(from = 2, to = 7, length.out =
length(which((positions > 65 & positions < 90) == TRUE))),
seq(from = 7, to = 2, length.out =
length(which((positions > 90 & positions < 125) == TRUE))),
rep(m_dist, length(which((positions > 125 & positions < 245) == TRUE))),
seq(from = 2, to = 7, length.out =
length(which((positions > 245 & positions < 270) == TRUE))),
seq(from = 7, to = 2, length.out =
length(which((positions > 270 & positions < 295) == TRUE))),
rep(m_dist, length(which((positions > 295) == TRUE)))
)
labels <- list('degree_shift' = degree_shift,
'dist_vals' = dist_vals)
return(labels)
}
vert_lab_position(obs)
vert_lab_position(obs, col = 1)
VLPS <- vert_lab_position(obs, col = 1)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
VLPs <- vert_lab_position(obs, col = 1)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift,
#   label.font = lbl_fnt
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs
VLPs$dist_vals <- 3
VLPs$dist_vals
VLPs <- vert_lab_position(obs, col = 1)
VLPs$dist_vals[3] <- 3
VLPs$dist_vals
VLPs$dist_vals <- rep(3, length(VLPs$dist_vals))
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs$dist_vals <- rep(5, length(VLPs$dist_vals))
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs$dist_vals
VLPs
VLPs$degree_shift <- rep(0, 8)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs <- vert_lab_position(obs, col = 1)
VLPs$dist_vals <- rep(5, length(VLPs$dist_vals))
VLPs$degree_shift[1:8] <- rep(0, 8)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs$degree_shift[1:6] <- rep(0, 6)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
VLPs$dist_vals <- rep(5, length(VLPs$dist_vals))
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
setwd('~/Documents/nothingButNet/scripts')
dat <- read.csv('../data/JeremieReclassTable.csv') %>%
mutate(value = if_else(value == 0, 0.1, value))
source('functions.R')
# we will create Three different networks. Where each one displays a different type of information
p2d <- file.path('../data/raw')
files <- list.files(p2d)
arranged_plants <- read.csv(file.path(p2d, files[grep('species', files)])) %>%
mutate(Genus = str_extract(full, '^.*[.]+?'),
Genus = str_remove(Genus, '[.].*$')) %>%
drop_na(Genus) %>%
filter(Genus != 'P') %>%
distinct(Genus) %>%
pull(Genus)
arranged_bees <- unlist(strsplit(readLines(
file.path(p2d, files[grep('bees', files)])), split = ','))
rm(p2d, files)
out <- dat %>%
split(f = list(.$method) ) %>%
map(~ .x  %>%
pivot_wider(names_from = plant, values_from = value)
) %>%
map(~ .x  %>%
column_to_rownames(., var = 'bee') %>%
mutate(across(.cols = everything(), ~replace_na(.x, 0))) %>%
select(-method)) %>%
map(., arrange_nets, col_arrange = arranged_plants, # now use the ARRANGE NET fun
row_arrange = arranged_bees) # to remove empty plants
Observations <- out[[1]]
Morphology <- out[[2]]
Molecular <- out[[3]]
Observations <- out[[1]]
obs <- rbind(Observations,
setNames(data.frame(matrix(ncol = ncol(Observations), nrow = 3, data = 0)),
colnames(Observations)))
obs <- cbind(obs, data.frame(matrix(data = 0, nrow = nrow(obs), ncol = 3)))
VNames <- vertex_names(obs)
net = igraph::graph_from_incidence_matrix(obs, weight=T)
deg = igraph::centr_degree(net, mode="all")
net <- set_colors(x = obs, net, node_clrs  = c("#CEAB07", "deeppink2"), VNames = VNames)
V(net)$label.color <- 'black'
V(net)$size = 2.5*sqrt(deg$res)
E(net)$width = E(net)$weight/3
template <- layout_in_circle(net)
VLPs <- vert_lab_position(obs, col = 1)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
net
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames#,
#   vertex.label.dist= VLPs$dist_vals,
#   vertex.label.degree = VLPs$degree_shift
)
plot(net)
plot(net)
template <- layout_in_circle(net)
VLPs <- vert_lab_position(obs, col = 1)
VLPs$dist_vals <- rep(5, length(VLPs$dist_vals))
VLPs$degree_shift[1:6] <- rep(0, 6)
plot(net)
plot(net, layout=template,
edge.color = 'lightseagreen',
vertex.label.cex = 1.25,
vertex.label = VNames,
vertex.label.dist= VLPs$dist_vals,
vertex.label.degree = VLPs$degree_shift
)

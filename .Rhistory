#  message(paste0("'", fname,
#                 "' has been rendered as a pdf and saved to:\n ",
#                 file.path(directory, fname)))
}
#  message(paste0("'", fname,
#                 "' has been rendered as a pdf and saved to:\n ",
#                 file.path(directory, fname)))
}
#  message(paste0("'", fname,
#                 "' has been rendered as a pdf and saved to:\n ",
#                 file.path(directory, fname)))
}
#  message(paste0("'", fname,
#                 "' has been rendered as a pdf and saved to:\n ",
#                 file.path(directory, fname)))
}
#' @param directory the folder holding your plots output from 'graphDrawer'
#' @param col_var a character vector of grouping variable to sort columns from
#'  left to right
#' @param row_var a character vector of a grouping variable to sort rows from
#' left to right
#' @example
#' netPage(col_var = c('observation', 'microscopy', 'molecular'),
#"        row_var = c('early', 'mid', 'late'))
#' @return a cowplot arranged grid.
#' @export
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){
}
#' @param directory the folder holding your plots output from 'graphDrawer'
#' @param col_var a character vector of grouping variable to sort columns from
#'  left to right
#' @param row_var a character vector of a grouping variable to sort rows from
#' left to right
#' @example
#' netPage(col_var = c('observation', 'microscopy', 'molecular'),
#"        row_var = c('early', 'mid', 'late'))
#' @return a cowplot arranged grid.
#' @export
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){
#' @param filename defaults to 'SizeLegend'
#' @param ntwrks_page the number of networks you plan on placing on each page
#' @param LcolN number of columns to split legend across
#' @param LegcolN number of columns in the table
#' @param colN number of columns for the nets on the page
#' @seealso
#' @example category_legend_drawer(node_clrs
#' = c("#CEAB07", "deeppink2"), LcolN = 1,
#'  legend_items = c("Bombus", "Plant"), ntwrks_page = 9, colN =3)
#' @export
tableLegend <- function(x, table_title, table_items, directory, fname, legend_items, node_clrs,
fill_col, y.space, ntwrks_page, colN, LcolN, LegcolN){
if(missing(directory)) { directory <- 'NetworkGraphs' }
if(missing(fname)) {fname <- 'TableLegend.png'}
if(missing(table_title)){table_title <- ""}
if(missing(fill_col)){fill_col <- 'white'}
if(missing(y.space)){y.space <- seq(from = 1, to = 2, length.out = 5)}
dims <- graph_dims(ntwrks_page, col = colN)
# create the categorical legend.
d <- data.frame(Group = c('Bombus', 'Plant'),
Dummy = c(1,1), Dummy2 = c(1,1))
v <- c("#CEAB07", "deeppink2")
names(v) <- c('Bombus', 'Plant')
p <- ggplot2::ggplot(d, ggplot2::aes(x= Dummy, y=Dummy2, color = Group)) +
ggplot2::geom_point() +
ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size=12))) +
ggplot2::scale_color_manual(values = v) +
ggplot2::labs(color = 'Major Interacting\nGroups ') +
ggplot2::theme(legend.key = ggplot2::element_rect(fill = "white"),
legend.title.align = 0.5,
legend.key.size = unit(2.5, 'cm'),
legend.key.height = unit(3, 'cm'),
legend.key.width = unit(3, 'cm'),
legend.title = ggplot2::element_text(size = 28),
legend.text = ggplot2::element_text(size = 24))
catLeg <- cowplot::get_legend(p)
#  create the legend table.
lname <- file.path(directory, fname)
grp <- ceiling(length(table_items)/LegcolN)
l <- (grp * LegcolN) - length(table_items)
table_items <- c(table_items, rep("", l))
v <- matrix(data = table_items , nrow = grp, ncol = LegcolN)
tt2 <- gridExtra::ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)),
base_size = 20)
tableLeg <- gridExtra::tableGrob(v, theme = tt2)
tableLeg <- gridExtra::grid.arrange(top = grid::textGrob(
table_title, gp=grid::gpar(fontsize=40)),
tableLeg)
# Create the bubble size legend
net <- lapply(x, igraph::graph_from_incidence_matrix, weight = T)
deg <- lapply(net, igraph::centr_degree,  mode = "all")
vals <- vector(mode = 'list', length = length(deg))
for (i in 1:length(deg)){
vals[[i]] <- deg[[i]][['res']]
}
interaction_no <- Reduce(c,vals)
breaks <- (max(interaction_no) - min(interaction_no)) / 4
Intervals <- c(min(interaction_no), round(breaks * 1),
round(breaks * 2), round(breaks * 3), max(interaction_no)
)
vals_size <- 2.5 * sqrt(Intervals)
size_legend <- data.frame('Interactions' = Intervals,  'Area' = vals_size)
# prepare the figure
p <- ggplot2::ggplot(size_legend, ggplot2::aes(Interactions, Area, size = Area)) +
ggplot2::geom_point() +
ggplot2::theme(legend.key =
ggplot2::element_rect(fill = "white"),
legend.title.align = 0.5,
legend.key.size = unit(1, 'cm'),
legend.key.height = unit(2, 'cm'),
legend.key.width = unit(2, 'cm'),
legend.title = ggplot2::element_text(size = 28),
legend.text = ggplot2::element_text(size = 24)) +
ggplot2::labs(size = 'No. of Interacting\nspecies')
sizeLeg <- cowplot::get_legend(p)
# now combine the three legends.
grobBY <- list(tableLeg, sizeLeg, catLeg)
lays <- rbind(
c(NA,NA,NA,NA,NA,NA),
c(1,1,1,1,1, 2),
c(1,1,1,1,1, 2),
c(1,1,1,1,1, 2),
c(1,1,1,1,1, 2),
c(1,1,1,1,1, 2),
c(1,1,1,1,1, 3),
c(1,1,1,1,1, 3),
c(1,1,1,1,1, 3),
c(NA,NA,NA,NA,NA,NA)
)
bucket <- invisible(gridExtra::grid.arrange(grobs = grobBY, layout_matrix = lays))
png(lname,
width = 1984, height = dims$H, units = "px", pointsize = 12)
invisible(grid::grid.draw(bucket))
invisible(dev.off())
message(paste0("'", fname,
"' has been rendered as a legend and saved to:\n ",
file.path(directory, fname)))
}
#' @param directory the folder holding your plots output from 'graphDrawer'
#' @param col_var a character vector of grouping variable to sort columns from
#'  left to right
#' @param row_var a character vector of a grouping variable to sort rows from
#' left to right
#' @example
#' netPage(col_var = c('observation', 'microscopy', 'molecular'),
#"        row_var = c('early', 'mid', 'late'))
#' @return a cowplot arranged grid.
#' @export
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){ }
#  if(missing(directory)) {directory <- 'NetworkGraphs'}
#  if(missing(fname)) {fname <- 'mosaiced_Nets.pdf'}
#  if(missing(sep_char))  {sep_char <- ''}
#  if(missing(mainT))  {mainT <- 'Bill walton thinks u forgot a title'}
#  if(missing(Tlegend_fname)) {Tlegend_fname <- 'TableLegend.png'}
rowOrder <- matrix( # this sets up a matrix to have rows groups in order
data = rep(row_var, each = length(col_var)),
ncol = length(col_var), byrow = T)
colOrder <- matrix( # this sets up a matrix to have column groups in order
data = rep(col_var, each = length(col_var)),
ncol = length(col_var), byrow = F)
image_orders <- matrix(paste0(colOrder, sep_char, rowOrder, '.png'),
ncol = length(col_var))
image_orders <- as.vector(t(image_orders))
image_orders <- file.path(directory, image_orders)
images = lapply(image_orders, png::readPNG)
nPlots <- (length(col_var) * length(row_var))
colN <- length(col_var)
rowN <- nPlots / length(col_var)
# define the layout
layout <- matrix(nrow = rowN, ncol = colN, byrow = T,
data = c(rep(1:(rowN -1), each = colN),
rowN:((rowN-1) + colN) )
)
layout <- rbind(layout, rep((max(layout) + 1), nrow(layout)))
# Recover the top grobs!!
top_grobs <- split(grob_images[1:(length(grob_images) - rowN)],
ceiling(seq_along(grob_images[1:(length(grob_images) -
rowN)]) / rowN))
names(top_grobs) <- paste0('t', seq(1:length(top_grobs)))
# title up the real top grob
#  t1 <- gridExtra::arrangeGrob(grobs = top_grobs$t1, ncol = colN,
#                               padding = unit(0.0, "line"),
#                               left = row_var[1], top = grid::textGrob(mainT, vjust = -1.1))
# this will get all of the subsequent top grobs !!!!!!!!
#  top_grobs <- mapply(gridExtra::arrangeGrob,
#                      grobs = top_grobs[2:length(top_grobs)], ncol = colN,
#                      left = row_var[2:(length(row_var)-1)],
#                      padding = unit(0.0, "line"))
#  list2env(top_grobs, env = environment())
# this recovers the bottom grobs
#  L <- length(grob_images)
#  range <- ((L - rowN) + 1 ):L
#  bottom_grobs <- split(grob_images[((L - rowN) + 1 ): L],
#                        seq_along(range) / 1)
#  names(bottom_grobs) <- paste0('b', seq(1:length(bottom_grobs)))
#  b1 <- gridExtra::arrangeGrob(grobs = bottom_grobs$b1, bottom = col_var[1],
#                               left = row_var[length(row_var)],
#                               padding = unit(0.0, "line"))
#  bottoms <- mapply(gridExtra::arrangeGrob,
#                    grobs = bottom_grobs[2:length(bottom_grobs)],
#                    bottom = col_var[2:(length(col_var))],
#                    padding = unit(0.0, "line"))
#  list2env(bottoms, env = environment())
# ensure the grobs are in the correct order for the mosaic.
#  g2p <- mget(ls(pattern = '[t|b][1-9]{1}'))
#  groborder <- c(paste0('t', seq(1:9)), paste0('b', seq(1:9)))
#  ord2grab <- match(groborder, names(g2p)) |> na.omit()
#  g2p <- g2p[ord2grab]
# load and place the legend onto the grobs2plot
#  legend <- grid::rasterGrob(png::readPNG(file.path(directory, Tlegend_fname)))
#  legend <- gridExtra::arrangeGrob(legend, nrow = 1)
#  g2p <- c(g2p, leg = list(legend))
# place on the page and print.
#  ml <- gridExtra::marrangeGrob(grobs = g2p,
#                                layout_matrix = layout, top = "")
#  pdf(file = file.path(directory, fname), paper = 'a4')
#  print(ml)
#  invisible(dev.off())
#  message(paste0("'", fname,
#                 "' has been rendered as a pdf and saved to:\n ",
#                 file.path(directory, fname)))
}
}
#'  left to right
#' @param row_var a character vector of a grouping variable to sort rows from
#' left to right
#' @example
#' netPage(col_var = c('observation', 'microscopy', 'molecular'),
#"        row_var = c('early', 'mid', 'late'))
#' @return a cowplot arranged grid.
#' @export
#'
#'
tableLegend <- function(x, table_title,  ntwrks_page, colN, LcolN, LegcolN){}
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){}
}
}
}
#'  left to right
#' @param row_var a character vector of a grouping variable to sort rows from
#' left to right
#' @example
#' netPage(col_var = c('observation', 'microscopy', 'molecular'),
#"        row_var = c('early', 'mid', 'late'))
#' @return a cowplot arranged grid.
#' @export
#'
#'
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){
#set_here('~/Documents/floral_observations')  # move this to be the root of the project folder on your box
# i_am('~/Documents/floral_observations')
setwd('~/Documents/nothingButNet')
p2d <- file.path('data/raw')
files <- list.files(p2d, pattern = 'csv')
source('scripts/functions.R')
}
library(here)
library(tidyverse)
library(igraph)
#set_here('~/Documents/floral_observations')  # move this to be the root of the project folder on your box
# i_am('~/Documents/floral_observations')
setwd('~/Documents/nothingButNet')
p2d <- file.path('data/raw')
files <- list.files(p2d, pattern = 'csv')
source('scripts/functions.R')
blast <- read.csv(file.path(p2d, files[grep('blast', files)])) %>%
select(sample.id, Taxon  = name, n = Seqs_pr_taxon) %>%
mutate('Method' = 'BLAST') %>%
drop_na()
bracken <- read.csv(file.path(p2d, files[grep('bracken', files)])) %>%
filter(taxonomy_lvl %in% c('S', 'G')) %>%
select(sample.id, Taxon, n = new_est_reads) %>%
mutate('Method' = 'Bracken')
kraken <- read.csv(file.path(p2d, files[grep('kraken', files)]))  %>%
select(sample.id = Sample, Taxon, n) %>%
mutate('Method' = 'Kraken')
arranged_plants <- read.csv(file.path(p2d, files[grep('species', files)])) %>%
pull(abbreviation)
plants_legend <- read.csv(file.path(p2d, files[grep('species', files)]))
seqs <- rbind(blast, bracken, kraken) %>%
mutate(sample.id = as.numeric(sample.id))
corbiculae <- read.csv(file.path(p2d, files[grep('Corbiculae', files)])) %>%
select(-site, -plant.species)
seqs <- left_join(seqs, corbiculae, by = 'sample.id')
p2d <- ('~/Documents/floral_observations/data')
files <- list.files(p2d, pattern = 'csv')
weeks <- read.csv(
paste0(p2d, '/', files[grep('queen_observations', files)]) )  %>%
select(date, week) %>%
distinct(date, .keep_all = T) %>%
mutate(period = case_when(
week %in% 3:5 ~ 'Early',
week %in% 6:8 ~ 'Mid',
week %in% 9:11 ~ 'Late'
))
seqs <- left_join(seqs, weeks, by = 'date') %>%
filter(caste == 'q') %>%
drop_na() %>%
mutate(bombus.species = gsub('Bombus.|.dark|.orange',  "", bombus.species)) %>%
select(Taxon, period, n, bombus.species, date, Method)
rm(blast, bracken, kraken, files, p2d, corbiculae, weeks)
arranged_bees <- c('bifarius', 'mixtus', 'rufocinctus', 'sylvicola',
'flavifrons',
'appositus', 'californicus', 'nevadensis',
'unknown')
bee_obs_wk <- seqs %>%
group_by(bombus.species, Taxon, period, Method) %>%
mutate(Interactions_total  = sum(n)) %>%
distinct(Taxon, bombus.species, period, .keep_all = T) %>%
select(bombus.species, Taxon, period, Interactions_total) %>%
ungroup(Taxon)
resin <- bee_obs_wk %>%  # if sp. we need to leave genus spelled out, if epithet present, than abbreviate species.
ungroup() %>%
mutate(periods = str_count(Taxon, pattern =  fixed('.'))) %>%
mutate(Taxon = str_replace(Taxon, " ", "."),
Taxon = if_else(periods == 0,  paste0(substr(Taxon, 1,1), '.',
gsub("^.*?\\.", "", Taxon )),
Taxon)) %>%
select(-periods) %>%
split(f = .$Method) %>%
map(~ .x  %>%
pivot_wider(names_from = Taxon, values_from = Interactions_total)
) %>%
bind_rows() %>%
split(f = list(.$Method, .$period) ) %>%
lapply(., select, -period, -Method) %>%
map(~ .x  %>%
column_to_rownames(., var = 'bombus.species') %>%
mutate(across(.cols = everything(), ~replace_na(.x, 0)))) %>%
map(., function(x){t(scales::rescale(t(x))) * 100}) %>% # scale big datasets.
map(., arrange_nets, col_arrange = arranged_plants, # now use the ARRANGE NET fun
row_arrange = arranged_bees) # to remove empty plants
list2env(resin,env = environment())
graphDrawer(Kraken.Late,
edge_clr = 'lightseagreen',
node_clrs  = c("#CEAB07", "deeppink2"),
legend_items = c("Bombus", "Plant"),
ntwrks_page = 9,
col = 3
)
rm(seqs, bee_obs_wk)
plsl <- plants_legend %>%
filter(str_detect(full, '[.]sp[.]$', negate = T)) %>%
mutate(full = str_pad(full, (max(str_length(full)) + 1), "right"),
full = str_replace(full, "\\.", " ")) %>%
pull(full)
tableLegend(x = resin, node_clrs = c("#CEAB07", "deeppink2"), ntwrks_page = 9,
colN = 3, LcolN = 1, legend_items = c("Bombus", "Plant"),
table_items = plsl, fill_col = 'black', table_title = 'Plant Species',
LegcolN = 5, y.space = c(1, 1.35, 1.25, 2.25, 1.95))
nets2Page(col_var = c('Kraken', 'Bracken', 'BLAST'), fname = 'Mosaiced_molecular_nets',
mainT = 'Comparision of Foraging Patterns from Three Sequence Alignment Algorithms',
row_var = c('Early', 'Mid', 'Late'), sep = '.')
}
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){
if(missing(directory)) {directory <- 'NetworkGraphs'}
if(missing(fname)) {fname <- 'mosaiced_Nets.pdf'}
if(missing(sep_char))  {sep_char <- ''}
if(missing(mainT))  {mainT <- 'Bill walton thinks u forgot a title'}
if(missing(Tlegend_fname)) {Tlegend_fname <- 'TableLegend.png'}
rowOrder <- matrix( # this sets up a matrix to have rows groups in order
data = rep(row_var, each = length(col_var)),
ncol = length(col_var), byrow = T)
colOrder <- matrix( # this sets up a matrix to have column groups in order
data = rep(col_var, each = length(col_var)),
ncol = length(col_var), byrow = F)
image_orders <- matrix(paste0(colOrder, sep_char, rowOrder, '.png'),
ncol = length(col_var))
image_orders <- as.vector(t(image_orders))
image_orders <- file.path(directory, image_orders)
images = lapply(image_orders, png::readPNG)
nPlots <- (length(col_var) * length(row_var))
colN <- length(col_var)
rowN <- nPlots / length(col_var)
# define the layout
layout <- matrix(nrow = rowN, ncol = colN, byrow = T,
data = c(rep(1:(rowN -1), each = colN),
rowN:((rowN-1) + colN) )
)
layout <- rbind(layout, rep((max(layout) + 1), nrow(layout)))
# Recover the top grobs!!
top_grobs <- split(grob_images[1:(length(grob_images) - rowN)],
ceiling(seq_along(grob_images[1:(length(grob_images) -
rowN)]) / rowN))
names(top_grobs) <- paste0('t', seq(1:length(top_grobs)))
# title up the real top grob
t1 <- gridExtra::arrangeGrob(grobs = top_grobs$t1, ncol = colN,
padding = unit(0.0, "line"),
left = row_var[1], top = grid::textGrob(mainT, vjust = -1.1))
# this will get all of the subsequent top grobs !!!!!!!!
top_grobs <- mapply(gridExtra::arrangeGrob,
grobs = top_grobs[2:length(top_grobs)], ncol = colN,
left = row_var[2:(length(row_var)-1)],
padding = unit(0.0, "line"))
list2env(top_grobs, env = environment())
# this recovers the bottom grobs
L <- length(grob_images)
range <- ((L - rowN) + 1 ):L
bottom_grobs <- split(grob_images[((L - rowN) + 1 ): L],
seq_along(range) / 1)
names(bottom_grobs) <- paste0('b', seq(1:length(bottom_grobs)))
b1 <- gridExtra::arrangeGrob(grobs = bottom_grobs$b1, bottom = col_var[1],
left = row_var[length(row_var)],
padding = unit(0.0, "line"))
bottoms <- mapply(gridExtra::arrangeGrob,
grobs = bottom_grobs[2:length(bottom_grobs)],
bottom = col_var[2:(length(col_var))],
padding = unit(0.0, "line"))
list2env(bottoms, env = environment())
# ensure the grobs are in the correct order for the mosaic.
g2p <- mget(ls(pattern = '[t|b][1-9]{1}'))
groborder <- c(paste0('t', seq(1:9)), paste0('b', seq(1:9)))
ord2grab <- match(groborder, names(g2p)) |> na.omit()
g2p <- g2p[ord2grab]
# load and place the legend onto the grobs2plot
legend <- grid::rasterGrob(png::readPNG(file.path(directory, Tlegend_fname)))
legend <- gridExtra::arrangeGrob(legend, nrow = 1)
g2p <- c(g2p, leg = list(legend))
# place on the page and print.
ml <- gridExtra::marrangeGrob(grobs = g2p,
layout_matrix = layout, top = "")
pdf(file = file.path(directory, fname), paper = 'a4')
print(ml)
invisible(dev.off())
message(paste0("'", fname,
"' has been rendered as a pdf and saved to:\n ",
file.path(directory, fname)))
}
nets2Page(col_var = c('Kraken', 'Bracken', 'BLAST'), fname = 'Mosaiced_molecular_nets',
mainT = 'Comparision of Foraging Patterns from Three Sequence Alignment Algorithms',
row_var = c('Early', 'Mid', 'Late'), sep = '.')
}
nets2Page <- function(directory, col_var, row_var, fname, sep_char, mainT, Tlegend_fname){
if(missing(directory)) {directory <- 'NetworkGraphs'}
if(missing(fname)) {fname <- 'mosaiced_Nets.pdf'}
if(missing(sep_char))  {sep_char <- ''}
if(missing(mainT))  {mainT <- 'Bill walton thinks u forgot a title'}
if(missing(Tlegend_fname)) {Tlegend_fname <- 'TableLegend.png'}
rowOrder <- matrix( # this sets up a matrix to have rows groups in order
data = rep(row_var, each = length(col_var)),
ncol = length(col_var), byrow = T)
colOrder <- matrix( # this sets up a matrix to have column groups in order
data = rep(col_var, each = length(col_var)),
ncol = length(col_var), byrow = F)
image_orders <- matrix(paste0(colOrder, sep_char, rowOrder, '.png'),
ncol = length(col_var))
image_orders <- as.vector(t(image_orders))
image_orders <- file.path(directory, image_orders)
images = lapply(image_orders, png::readPNG)
grob_images = lapply(images, grid::rasterGrob)
nPlots <- (length(col_var) * length(row_var))
colN <- length(col_var)
rowN <- nPlots / length(col_var)
# define the layout
layout <- matrix(nrow = rowN, ncol = colN, byrow = T,
data = c(rep(1:(rowN -1), each = colN),
rowN:((rowN-1) + colN) )
)
layout <- rbind(layout, rep((max(layout) + 1), nrow(layout)))
# Recover the top grobs!!
top_grobs <- split(grob_images[1:(length(grob_images) - rowN)],
ceiling(seq_along(grob_images[1:(length(grob_images) -
rowN)]) / rowN))
names(top_grobs) <- paste0('t', seq(1:length(top_grobs)))
# title up the real top grob
t1 <- gridExtra::arrangeGrob(grobs = top_grobs$t1, ncol = colN,
padding = unit(0.0, "line"),
left = row_var[1], top = grid::textGrob(mainT, vjust = -1.1))
# this will get all of the subsequent top grobs !!!!!!!!
top_grobs <- mapply(gridExtra::arrangeGrob,
grobs = top_grobs[2:length(top_grobs)], ncol = colN,
left = row_var[2:(length(row_var)-1)],
padding = unit(0.0, "line"))
list2env(top_grobs, env = environment())
# this recovers the bottom grobs
L <- length(grob_images)
range <- ((L - rowN) + 1 ):L
bottom_grobs <- split(grob_images[((L - rowN) + 1 ): L],
seq_along(range) / 1)
names(bottom_grobs) <- paste0('b', seq(1:length(bottom_grobs)))
b1 <- gridExtra::arrangeGrob(grobs = bottom_grobs$b1, bottom = col_var[1],
left = row_var[length(row_var)],
padding = unit(0.0, "line"))
bottoms <- mapply(gridExtra::arrangeGrob,
grobs = bottom_grobs[2:length(bottom_grobs)],
bottom = col_var[2:(length(col_var))],
padding = unit(0.0, "line"))
list2env(bottoms, env = environment())
# ensure the grobs are in the correct order for the mosaic.
g2p <- mget(ls(pattern = '[t|b][1-9]{1}'))
groborder <- c(paste0('t', seq(1:9)), paste0('b', seq(1:9)))
ord2grab <- match(groborder, names(g2p)) |> na.omit()
g2p <- g2p[ord2grab]
# load and place the legend onto the grobs2plot
legend <- grid::rasterGrob(png::readPNG(file.path(directory, Tlegend_fname)))
legend <- gridExtra::arrangeGrob(legend, nrow = 1)
g2p <- c(g2p, leg = list(legend))
# place on the page and print.
ml <- gridExtra::marrangeGrob(grobs = g2p,
layout_matrix = layout, top = "")
pdf(file = file.path(directory, fname), paper = 'a4')
print(ml)
invisible(dev.off())
message(paste0("'", fname,
"' has been rendered as a pdf and saved to:\n ",
file.path(directory, fname)))
}
nets2Page(col_var = c('Kraken', 'Bracken', 'BLAST'), fname = 'Mosaiced_molecular_nets',
mainT = 'Comparision of Foraging Patterns from Three Sequence Alignment Algorithms',
row_var = c('Early', 'Mid', 'Late'), sep = '.')
rm(BLAST.Early, BLAST.Late, BLAST.Mid, Bracken.Early, Bracken.Late, Bracken.Mid,
Kraken.Early, Kraken.Late, Kraken.Mid)
